- One of the feature of concurrent system is that they should have ability to signal when the task is completed

Threads are lightweight processes which share same memory spaces of the owing process
Threads are basic unit of scheduling for OS

Do same type of work on one thread , separate other type of work on different thread

Since the threads share same memory space, careful synchronization is required to avoid concurrency hazards

Concurrency Hazards ->
    Race Condition -> Output is dependent on timing of different threads and result is not predictable.
    A race condition occurs when the correctness of a computation depends on the relative timing or interleaving of multiple threads by the runtime;
    Liveliness failure -> System reaches a state after which no progress can happen
    performance hazard ->  Poor performance

An object state is not only state of its instance variable but also state of all the objects it references or composed of

Three ways to fix broken concurrent programs : -
• Don’t share the state variable across threads;
• Make the state variable immutable; or
• Use synchronization whenever accessing the state variable.

Stateless objects are always thread-safe.

Race condition can occur for : check-and-act operations or read-modify-write operations
Above can be remediated if we can make these operation atomic

When dealing with multiple states sometime it is not enought that each operation is atomic individually , they operations should be atomic as whole

intrinsic locks / monitor locks - These are locks acquired automatically by a thread while entering a synchnorized block or method. THey act as mutexes.

Reentrant locks - Reentrancy means that locks are acquired on a per-thread rather than per-invocation basis. In java intrinsic locks are by default reentrant

For each mutable state variable that may be accessed by more than one thread, all accesses to that variable must be performed with the same lock held. In this case, we say that the variable is guarded by that lock.

Every shared, mutable variable should be guarded by exactly one lock.Make it clear to maintainers which lock that is.

For every invariant that involves more than one variable, all the variables
involved in that invariant must be guarded by the same lock.

Visibility -> It can happen that change the value of a state in on thread is not visible to another thread

Locking is not just about mutual exclusion; it is also about memory visi-bility. To ensure that all threads see the most up-to-date values of shared
mutable variables, the reading and writing threads must synchronize on a common lock

When a field is declared volatile, the compiler and runtime
are put on notice that this variable is shared and that operations on it should not
be reordered with other memory operations. Volatile variables are not cached in
registers or in caches where they are hidden from other processors, so a read of a
volatile variable always returns the most recent write by any thread.

Locking can guarantee both visibility and atomicity; volatile variables can only guarantee visibility.



Thread Confinement :
    If data is only accessed from a single thread, no synchronization is needed. This technique, thread confinement, is one of the
    simplest ways to achieve thread safety

Publishing :

Publishing an object means making it available to code outside its current scope,
such as by storing a reference to it where other code can find it, returning it
from a nonprivate method, or passing it to a method in another class

An object that is published when it should not have been is said to
have escaped

Publishing one object may indirectly publish other

Do not allow the "this" reference to escape during construction

There’s nothing wrong with creating a thread in a constructor, but it is best not to start the thread immediately.

Calling an overrideable instance method (one that is neither private nor final) from the constructor
can also allow the "this" reference to escape.

To publish an object safely, both the reference to the object and the object’s state must be made visible to other threads at the same time.

A properly constructed object can be safely published by:
• Initializing an object reference from a static initializer;
• Storing a reference to it into a volatile field or AtomicReference;
• Storing a reference to it into a final field of a properly constructed
object; or
• Storing a reference to it into a field that is properly guarded by a
lock.




